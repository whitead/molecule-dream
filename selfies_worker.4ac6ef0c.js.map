{"version":3,"sources":["lib/selfies_worker.js"],"names":["selfiesMod","selfies2smiles","s","pyodideLoaded","selfiesLoaded","console","log","importScripts","loadPyodide","indexURL","then","pyodide","loadPackage","runPythonAsync","err","decoder","globals","get","selfies","result","onmessage","e","data","mtype","mid","postMessage"],"mappings":";AAGA,IAAMA,EAAa,CACfC,eAAgB,SAAAC,GAAc,MAAA,IAC9BC,cAAe,UACfC,cAAe,WAGnBC,QAAQC,IAAI,0BACZC,cAAc,4DAEdC,YAAY,CAAEC,SAAU,mDAAoDC,KAAK,SAACC,GAC9EX,EAAWG,cAAgB,SAC3BQ,EAAQC,YAAY,YAAYF,KAAK,WACjCC,EAAQE,eAIL,yIAAA,SAACC,GACAd,EAAWG,cAAgB,SAC3BH,EAAWI,cAAgB,WAC5BM,KAAK,WACJV,EAAWI,cAAgB,SACrBW,IAAAA,EAAUJ,EAAQK,QAAQC,IAAI,WACpCjB,EAAWC,eAAiB,SAACiB,GAElBC,OADMJ,EAAQG,OAI9B,SAACJ,GACAd,EAAWI,cAAgB,aAKnCgB,UAAY,SAACC,GACHC,IAAAA,EAAOD,EAAEC,KACTC,EAAQD,EAAK,GACbE,EAAMF,EAAK,GACbH,EAAS,GAETA,EADU,mBAAVI,EACS,CAAEZ,QAASX,EAAWG,cAAee,QAASlB,EAAWI,eAEzDJ,EAAWC,eAAeqB,EAAK,IAE5CG,YAAY,CAACF,EAAOC,EAAKL","file":"selfies_worker.4ac6ef0c.js","sourceRoot":"../src","sourcesContent":["\n\n// make fake function to start with\nconst selfiesMod = {\n    selfies2smiles: s => { return '' },\n    pyodideLoaded: 'loading',\n    selfiesLoaded: 'loading'\n};\n\nconsole.log('SELFIE WORKER: Started')\nimportScripts('https://cdn.jsdelivr.net/pyodide/v0.18.1/full/pyodide.js')\n\nloadPyodide({ indexURL: \"https://cdn.jsdelivr.net/pyodide/v0.18.1/full/\" }).then((pyodide) => {\n    selfiesMod.pyodideLoaded = 'loaded';\n    pyodide.loadPackage('micropip').then(() => {\n        pyodide.runPythonAsync(`\n            import micropip\n            await micropip.install('selfies==1.0.4')\n            from selfies import decoder\n        `, (err) => {\n            selfiesMod.pyodideLoaded = 'failed';\n            selfiesMod.selfiesLoaded = 'failed';\n        }).then(() => {\n            selfiesMod.selfiesLoaded = 'loaded'\n            const decoder = pyodide.globals.get('decoder');\n            selfiesMod.selfies2smiles = (selfies) => {\n                let result = decoder(selfies);\n                return result;\n            };\n        });\n    }, (err) => {\n        selfiesMod.selfiesLoaded = 'failed';\n    })\n});\n\n\nonmessage = (e) => {\n    const data = e.data;\n    const mtype = data[0];\n    const mid = data[1];\n    let result = '';\n    if (mtype === 'loading-status') {\n        result = { pyodide: selfiesMod.pyodideLoaded, selfies: selfiesMod.selfiesLoaded };\n    } else {\n        result = selfiesMod.selfies2smiles(data[2]);\n    }\n    postMessage([mtype, mid, result]);\n}\n"]}